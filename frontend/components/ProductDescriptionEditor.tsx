'use client';

import React, { useState, useEffect } from 'react';
import MDEditor from '@uiw/react-md-editor';
import { Button } from '@/components/ui/button';
import { Save, Eye, Edit3 } from 'lucide-react';

interface ProductDescriptionEditorProps {
  productId?: number;
  initialValue?: string;
  onSave?: (description: string) => void;
  onCancel?: () => void;
  isEditing?: boolean;
  onEdit?: () => void;
}

export default function ProductDescriptionEditor({ 
  productId, 
  initialValue = '', 
  onSave, 
  onCancel,
  isEditing = false,
  onEdit
}: ProductDescriptionEditorProps) {
  const [value, setValue] = useState(initialValue);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [editMode, setEditMode] = useState(isEditing);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω productId
  useEffect(() => {
    if (productId && !initialValue) {
      setLoading(true);
      fetch(`/api/products/${productId}`)
        .then(res => res.json())
        .then(data => {
          setValue(data.description || '');
          setLoading(false);
        })
        .catch(err => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', err);
          setLoading(false);
        });
    } else {
      setValue(initialValue);
    }
  }, [productId, initialValue]);

  const handleSave = async () => {
    setSaving(true);
    try {
      if (productId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API
        await fetch(`/api/products/${productId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ description: value }),
        });
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
      if (onSave) {
        onSave(value);
      }
      
      setEditMode(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    setValue(initialValue);
    setEditMode(false);
    if (onCancel) {
      onCancel();
    }
  };

  const handleEdit = () => {
    setEditMode(true);
    if (onEdit) {
      onEdit();
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è...</span>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50">
        <h3 className="text-lg font-semibold text-gray-900">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h3>
        <div className="flex items-center space-x-2">
          {!editMode ? (
            <Button
              onClick={handleEdit}
              variant="outline"
              size="sm"
              className="flex items-center space-x-1"
            >
              <Edit3 className="w-4 h-4" />
              <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
            </Button>
          ) : (
            <div className="flex items-center space-x-2">
              <Button
                onClick={handleCancel}
                variant="outline"
                size="sm"
                disabled={saving}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                onClick={handleSave}
                size="sm"
                disabled={saving}
                className="flex items-center space-x-1 bg-blue-600 hover:bg-blue-700"
              >
                <Save className="w-4 h-4" />
                <span>{saving ? '–°–æ—Ö—Ä–∞–Ω—è—é...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</span>
              </Button>
            </div>
          )}
        </div>
      </div>

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
      <div className="p-4">
        {editMode ? (
          <div className="space-y-4">
            <MDEditor 
              value={value} 
              onChange={setValue} 
              height={400}
              data-color-mode="light"
              preview="edit"
              hideToolbar={false}
            />
            
            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
            {value && (
              <div className="border-t pt-4">
                <div className="flex items-center space-x-2 mb-2">
                  <Eye className="w-4 h-4 text-gray-500" />
                  <span className="text-sm font-medium text-gray-700">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</span>
                </div>
                <div className="prose max-w-none text-sm border rounded-lg p-4 bg-gray-50">
                  <MDEditor.Markdown source={value} />
                </div>
              </div>
            )}
            
            {/* –°–ø—Ä–∞–≤–∫–∞ –ø–æ Markdown */}
            <div className="border-t pt-4">
              <details className="group">
                <summary className="cursor-pointer text-sm font-medium text-gray-700 hover:text-gray-900">
                  üìù –°–ø—Ä–∞–≤–∫–∞ –ø–æ Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
                </summary>
                <div className="mt-3 text-xs text-gray-600 space-y-2">
                  <div><strong>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</strong> # –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1, ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2, ### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3</div>
                  <div><strong>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç:</strong> **–∂–∏—Ä–Ω—ã–π** –∏–ª–∏ __–∂–∏—Ä–Ω—ã–π__</div>
                  <div><strong>–ö—É—Ä—Å–∏–≤:</strong> *–∫—É—Ä—Å–∏–≤* –∏–ª–∏ _–∫—É—Ä—Å–∏–≤_</div>
                  <div><strong>–°–ø–∏—Å–∫–∏:</strong> - —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 1. –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π</div>
                  <div><strong>–°—Å—ã–ª–∫–∏:</strong> [—Ç–µ–∫—Å—Ç](https://example.com)</div>
                  <div><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> ![alt](https://example.com/image.jpg)</div>
                  <div><strong>–ö–æ–¥:</strong> `–∫–æ–¥` –∏–ª–∏ ```–±–ª–æ–∫ –∫–æ–¥–∞```</div>
                </div>
              </details>
            </div>
          </div>
        ) : (
          <div className="prose max-w-none">
            {value ? (
              <MDEditor.Markdown source={value} />
            ) : (
              <p className="text-gray-500 italic">–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
